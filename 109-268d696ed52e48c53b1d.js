(window.webpackJsonp=window.webpackJsonp||[]).push([[109],{1015:function(e,t,n){"use strict";var a=n(6);Object.defineProperty(t,"__esModule",{value:!0}),t.SlidePanelPositions=t.default=void 0;var s=a(n(19)),l=a(n(24)),r=a(n(21)),i=a(n(25)),o=a(n(31)),c=a(n(28)),d=a(n(29)),u=a(n(30)),p=a(n(0)),m=a(n(2)),h=a(n(10)),f=a(n(5)),g=a(n(7)),b=a(n(1022));function v(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,a=(0,u.default)(e);if(t){var s=(0,u.default)(this).constructor;n=Reflect.construct(a,arguments,s)}else n=a.apply(this,arguments);return(0,d.default)(this,n)}}var y=f.default.bind(b.default),x={START:"start",END:"end"};t.SlidePanelPositions=x;var C={panelAriaLabel:m.default.string,mainAriaLabel:m.default.string,mainContent:m.default.node,panelContent:m.default.node,panelBehavior:m.default.oneOf(["overlay","squish"]),panelPosition:m.default.oneOf(["start","end"]),panelSize:m.default.oneOf(["small","large"]),isFullscreen:m.default.bool,isOpen:m.default.bool,fill:m.default.bool},D={panelBehavior:"overlay",panelPosition:x.END,panelSize:"small"},S=function(e){(0,c.default)(n,e);var t=v(n);function n(e){var a;return(0,r.default)(this,n),(a=t.call(this,e)).setPanelNode=a.setPanelNode.bind((0,o.default)(a)),a.mainNode=p.default.createRef(),a}return(0,i.default)(n,[{key:"componentDidUpdate",value:function(e){this.props.isOpen&&this.props.isOpen!==e.isOpen?this.panelNode.focus():this.props.isOpen||this.props.isOpen===e.isOpen||this.mainNode.current.focus()}},{key:"setPanelNode",value:function(e){this.panelNode=e}},{key:"render",value:function(){var e=this.props,t=e.panelAriaLabel,n=e.mainAriaLabel,a=e.mainContent,r=e.panelContent,i=e.panelBehavior,o=e.panelPosition,c=e.panelSize,d=e.isFullscreen,u=e.isOpen,m=e.fill,f=(0,l.default)(e,["panelAriaLabel","mainAriaLabel","mainContent","panelContent","panelBehavior","panelPosition","panelSize","isFullscreen","isOpen","fill"]),g=this.context,b=(0,h.default)(y("slide-panel",{"is-open":u},{"is-fullscreen":d},{fill:m},g.className),f.className),v=p.default.createElement("div",{className:y(["panel"]),key:"panel",tabIndex:"-1","aria-label":t,"aria-hidden":u?"false":"true",ref:this.setPanelNode},r),C=p.default.createElement("div",{className:y("main"),key:"main",tabIndex:"-1","aria-label":n,ref:this.mainNode},a),D=o===x.START?p.default.createElement(p.default.Fragment,null,v,C):p.default.createElement(p.default.Fragment,null,C,v);return p.default.createElement("div",(0,s.default)({},f,{className:b,"data-slide-panel-panel-behavior":i,"data-slide-panel-panel-position":o,"data-slide-panel-panel-size":c}),D)}}]),n}(p.default.Component);S.propTypes=C,S.defaultProps=D,S.contextType=g.default;var E=S;t.default=E},1022:function(e,t,n){"use strict";n.r(t),t.default={"clinical-lowlight-theme":"SlidePanel-module__clinical-lowlight-theme___3PlGc","orion-fusion-theme":"SlidePanel-module__orion-fusion-theme___2R-RA","slide-panel":"SlidePanel-module__slide-panel___3p50s",main:"SlidePanel-module__main___148ym",panel:"SlidePanel-module__panel___3U_Ba","is-open":"SlidePanel-module__is-open___2oBW3","is-fullscreen":"SlidePanel-module__is-fullscreen___2b64E",fill:"SlidePanel-module__fill___1cmXh"}},1075:function(e,t,n){"use strict";var a=n(6),s=n(12);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.disclosureType=void 0;var l,r=a(n(19)),i=a(n(24)),o=a(n(21)),c=a(n(25)),d=a(n(31)),u=a(n(28)),p=a(n(29)),m=a(n(30)),h=a(n(63)),f=a(n(0)),g=a(n(2)),b=a(n(85)),v=a(n(50)),y=s(n(220)),x=a(n(343)),C=a(n(1015));function D(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,a=(0,m.default)(e);if(t){var s=(0,m.default)(this).constructor;n=Reflect.construct(a,arguments,s)}else n=a.apply(this,arguments);return(0,p.default)(this,n)}}var S="panel";t.disclosureType=S;var E={children:g.default.node,panelBehavior:g.default.oneOf(["overlay","squish"]),disclosureAccessory:g.default.element,withDisclosureContainer:g.default.func},k=(l={},(0,h.default)(l,y.availableDisclosureSizes.TINY,"small"),(0,h.default)(l,y.availableDisclosureSizes.SMALL,"small"),(0,h.default)(l,y.availableDisclosureSizes.MEDIUM,"large"),(0,h.default)(l,y.availableDisclosureSizes.LARGE,"large"),(0,h.default)(l,y.availableDisclosureSizes.HUGE,"large"),l),M=function(e){(0,u.default)(n,e);var t=D(n);function n(e){var a;return(0,o.default)(this,n),(a=t.call(this,e)).renderSlidePanel=a.renderSlidePanel.bind((0,d.default)(a)),a}return(0,c.default)(n,[{key:"renderSlidePanel",value:function(e){var t,n,a,s,l,o=this.props,c=(o.children,o.disclosureAccessory),d=(o.withDisclosureContainer,(0,i.default)(o,["children","disclosureAccessory","withDisclosureContainer"]));(e.disclosure.size===y.availableDisclosureSizes.FULLSCREEN||e.disclosure.isMaximized)&&(a=!0),s=e.disclosure.dimensions?(l=e.disclosure.dimensions).width>480||l.height>600?"large":"small":k[e.disclosure.size];var u=null!=e&&null!==(t=e.disclosure)&&void 0!==t&&null!==(n=t.typeConfig)&&void 0!==n&&n.panelBehavior?e.disclosure.typeConfig.panelBehavior:d.panelBehavior,p=e.disclosureComponentKeys[e.disclosureComponentKeys.length-1],m=(e.disclosureComponentData[p]||{}).headerAdapterData;return f.default.createElement(C.default,(0,r.default)({},d,{fill:!0,panelBehavior:u,isFullscreen:a,panelSize:s,isOpen:e.disclosure.isOpen,panelContent:f.default.createElement(v.default,{fill:!0,header:f.default.createElement(f.default.Fragment,null,m?f.default.createElement(b.default,{title:m.title,onClose:e.closeDisclosure,onBack:e.disclosureComponentKeys.length>1?e.dismissPresentedComponent:void 0,onMaximize:e.maximizeDisclosure,onMinimize:e.minimizeDisclosure},m.collapsibleMenuView):void 0,c)},f.default.createElement(x.default,{items:e.disclosure.components,isAnimated:!0})),mainContent:e.children.components}))}},{key:"render",value:function(){var e=this.props,t=e.withDisclosureContainer,n=e.children;return f.default.createElement(y.default,{withDisclosureContainer:t,supportedDisclosureTypes:[S],render:this.renderSlidePanel},n)}}]),n}(f.default.Component);M.propTypes=E,M.defaultProps={panelBehavior:"overlay"};var T=M;t.default=T},1166:function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var a=n(0),s=n.n(a),l=n(988),r=n.n(l),i=function(e){var t=e.url;return s.a.createElement(r.a,{src:"https://github.com/cerner/terra-framework/tree/main/packages/terra-slide-panel-manager",name:"terra-slide-panel-manager",version:"5.49.0",url:t})}},1383:function(e,t,n){"use strict";n.r(t),t.default={"example-wrapper":"SlidePanelManager-module__example-wrapper___1Qv-R","content-wrapper":"SlidePanelManager-module__content-wrapper___198DP","disclosure-accessory":"SlidePanelManager-module__disclosure-accessory___2nRj2"}},1719:function(e,t,n){"use strict";var a=n(6);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var s=a(n(63)),l=a(n(21)),r=a(n(25)),i=a(n(31)),o=a(n(28)),c=a(n(29)),d=a(n(30)),u=a(n(0)),p=a(n(2)),m=a(n(5)),h=a(n(85)),f=a(n(1066)),g=a(n(50)),b=n(220),v=a(n(1075)),y=a(n(1383));function x(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,a=(0,d.default)(e);if(t){var s=(0,d.default)(this).constructor;n=Reflect.construct(a,arguments,s)}else n=a.apply(this,arguments);return(0,c.default)(this,n)}}var C=m.default.bind(y.default),D=function(e){(0,o.default)(n,e);var t=x(n);function n(e){var a;return(0,l.default)(this,n),(a=t.call(this,e)).checkLockState=a.checkLockState.bind((0,i.default)(a)),a.state={text:void 0},a}return(0,r.default)(n,[{key:"componentDidMount",value:function(){var e=this.context;e&&e.registerDismissCheck&&e.registerDismissCheck(this.checkLockState)}},{key:"checkLockState",value:function(){var e=this;return this.state.text&&this.state.text.length?new Promise((function(t,n){confirm("".concat(e.props.name," has unsaved changes that will be lost. Do you wish to continue?"))?t():n()})):Promise.resolve()}},{key:"render",value:function(){var e=this,t=this.props,a=t.name,s=t.disclosureType,l=this.context;return u.default.createElement(g.default,{fill:!0},u.default.createElement(b.DisclosureManagerHeaderAdapter,{title:a,collapsibleMenuView:u.default.createElement(f.default,null,u.default.createElement(f.default.Item,{text:"Button 1",key:"button_1",onClick:function(){e.setState({selectedHeaderAction:"Button 1"})}}),u.default.createElement(f.default.Item,{text:"Button 2",key:"button_2",onClick:function(){e.setState({selectedHeaderAction:"Button 2"})}}))}),u.default.createElement("div",{className:C("content-wrapper")},u.default.createElement("h3",null,a),u.default.createElement("p",null,"The disclosed component can disclose content within the same panel."),u.default.createElement("p",null,"It can also render a header (like above) that implements the various DisclosureManager control functions."),u.default.createElement("button",{type:"button",onClick:function(){l.dismiss().catch((function(){console.log("Dismiss failed. A lock must be in place.")}))}},"Dismiss"),u.default.createElement("button",{type:"button",onClick:function(){l.disclose({preferredType:s,size:"small",content:{key:"Nested ".concat(a),component:u.default.createElement(n,{name:"Nested ".concat(a),disclosureType:s})}})}},"Disclose Again"),u.default.createElement("br",null),u.default.createElement("br",null),u.default.createElement("p",null,"The disclosed component can register a dismiss check function that can interrupt and prevent dismissal. This component will prompt the user if text is detected in the input field below."),u.default.createElement("input",{"aria-label":"textArea",type:"text",onChange:function(t){e.setState({text:t.target.value})},value:this.state.text||""}),this.state.text&&this.state.text.length?u.default.createElement("p",null,"Component has unsaved changes!"):null,u.default.createElement("br",null),u.default.createElement("br",null),u.default.createElement("p",null,"Selected Header Action:"," ",u.default.createElement("b",null,this.state.selectedHeaderAction))))}}]),n}(u.default.Component);D.contextType=b.DisclosureManagerContext,D.propTypes={name:p.default.string,disclosureType:p.default.string},D.defaultProps={name:"Disclosure Component"};var S=Object.keys(b.availableDisclosureHeights),E=Object.keys(b.availableDisclosureWidths),k=function(e){return e.map((function(e,t){var n=t;return u.default.createElement("option",{key:n,value:e},e)}))},M=function(e){(0,o.default)(n,e);var t=x(n);function n(e){var a;return(0,l.default)(this,n),(a=t.call(this,e)).renderButton=a.renderButton.bind((0,i.default)(a)),a.handleSelectChange=a.handleSelectChange.bind((0,i.default)(a)),a.getId=a.getId.bind((0,i.default)(a)),a.state={id:"dimensions",disclosureHeight:S[0],disclosureWidth:E[0]},a}return(0,r.default)(n,[{key:"handleSelectChange",value:function(e){this.setState((0,s.default)({},e.target.name,e.target.value))}},{key:"getId",value:function(e){return e+this.state.id}},{key:"renderButton",value:function(e){var t=this.context;return u.default.createElement("button",{type:"button",onClick:function(){t.disclose({preferredType:"panel",size:e,content:{key:"Content-Disclosure-".concat(e),component:u.default.createElement(D,{name:"Disclosure Component",disclosureType:"panel"})}})}},"Disclose (".concat(e,")"))}},{key:"renderFormButton",value:function(){var e=this,t=this.context,n="Disclose (".concat(this.state.disclosureHeight,") x (").concat(this.state.disclosureWidth,")");return u.default.createElement("button",{type:"button",onClick:function(){t.disclose({preferredType:"panel",typeConfig:{panelBehavior:"overlay"},dimensions:{height:e.state.disclosureHeight,width:e.state.disclosureWidth},content:{key:"Content-Disclosure-Dimensions",component:u.default.createElement(D,{name:"Disclosure Component",disclosureType:"panel"})}})}},n)}},{key:"renderForm",value:function(){return u.default.createElement("form",null,u.default.createElement("label",{htmlFor:this.getId("disclosureHeightOverlay")},"Pop Content Height"),u.default.createElement("select",{id:this.getId("disclosureHeightOverlay"),name:"disclosureHeight",value:this.state.disclosureHeight,onChange:this.handleSelectChange},k(S)),u.default.createElement("br",null),u.default.createElement("br",null),u.default.createElement("label",{htmlFor:this.getId("disclosureWidthOverlay")},"Pop Content Width"),u.default.createElement("select",{id:this.getId("disclosureWidthOverlay"),name:"disclosureWidth",value:this.state.disclosureWidth,onChange:this.handleSelectChange},k(E)),u.default.createElement("br",null),u.default.createElement("br",null))}},{key:"render",value:function(){return u.default.createElement(g.default,{header:u.default.createElement(h.default,{title:"SlidePanelManager Child Component"})},u.default.createElement("div",{className:C("content-wrapper")},this.renderButton("default"),this.renderButton("tiny"),this.renderButton("small"),this.renderButton("medium"),this.renderButton("large"),this.renderButton("huge"),this.renderButton("fullscreen"),u.default.createElement("br",null),u.default.createElement("p",null,"The child components can disclose content in the panel at various sizes."),u.default.createElement("p",null,"The sizes available are limited to those of the SlidePanel. The specified size/dimensions will be mapped to the nearest available size.")),u.default.createElement("div",{className:C("content-wrapper")},this.renderForm(),this.renderFormButton()))}}]),n}(u.default.Component);M.contextType=b.DisclosureManagerContext;var T=function(){return u.default.createElement("div",{className:C("example-wrapper")},u.default.createElement(v.default,null,u.default.createElement(M,null)))};t.default=T},1720:function(e,t,n){"use strict";var a=n(6);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var s=a(n(63)),l=a(n(21)),r=a(n(25)),i=a(n(31)),o=a(n(28)),c=a(n(29)),d=a(n(30)),u=a(n(0)),p=a(n(2)),m=a(n(5)),h=a(n(85)),f=a(n(1066)),g=a(n(50)),b=n(220),v=a(n(1075)),y=a(n(1383));function x(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,a=(0,d.default)(e);if(t){var s=(0,d.default)(this).constructor;n=Reflect.construct(a,arguments,s)}else n=a.apply(this,arguments);return(0,c.default)(this,n)}}var C=m.default.bind(y.default),D=function(e){(0,o.default)(n,e);var t=x(n);function n(e){var a;return(0,l.default)(this,n),(a=t.call(this,e)).checkLockState=a.checkLockState.bind((0,i.default)(a)),a.state={text:void 0},a}return(0,r.default)(n,[{key:"componentDidMount",value:function(){var e=this.context;e&&e.registerDismissCheck&&e.registerDismissCheck(this.checkLockState)}},{key:"checkLockState",value:function(){var e=this;return this.state.text&&this.state.text.length?new Promise((function(t,n){confirm("".concat(e.props.name," has unsaved changes that will be lost. Do you wish to continue?"))?t():n()})):Promise.resolve()}},{key:"render",value:function(){var e=this,t=this.props,a=t.name,s=t.disclosureType,l=this.context;return u.default.createElement(g.default,{fill:!0},u.default.createElement(b.DisclosureManagerHeaderAdapter,{title:a,collapsibleMenuView:u.default.createElement(f.default,null,u.default.createElement(f.default.Item,{text:"Button 1",key:"button_1",onClick:function(){e.setState({selectedHeaderAction:"Button 1"})}}),u.default.createElement(f.default.Item,{text:"Button 2",key:"button_2",onClick:function(){e.setState({selectedHeaderAction:"Button 2"})}}))}),u.default.createElement("div",{className:C("content-wrapper")},u.default.createElement("h3",null,a),u.default.createElement("p",null,"The disclosed component can disclose content within the same panel."),u.default.createElement("p",null,"It can also render a header (like above) that implements the various DisclosureManager control functions."),u.default.createElement("button",{type:"button",onClick:function(){l.dismiss().catch((function(){console.log("Dismiss failed. A lock must be in place.")}))}},"Dismiss"),u.default.createElement("button",{type:"button",onClick:function(){l.disclose({preferredType:s,size:"small",content:{key:"Nested ".concat(a),component:u.default.createElement(n,{name:"Nested ".concat(a),disclosureType:s})}})}},"Disclose Again"),u.default.createElement("br",null),u.default.createElement("br",null),u.default.createElement("p",null,"The disclosed component can register a dismiss check function that can interrupt and prevent dismissal. This component will prompt the user if text is detected in the input field below."),u.default.createElement("input",{"aria-label":"textArea",type:"text",onChange:function(t){e.setState({text:t.target.value})},value:this.state.text||""}),this.state.text&&this.state.text.length?u.default.createElement("p",null,"Component has unsaved changes!"):null,u.default.createElement("br",null),u.default.createElement("br",null),u.default.createElement("p",null,"Selected Header Action:"," ",u.default.createElement("b",null,this.state.selectedHeaderAction))))}}]),n}(u.default.Component);D.contextType=b.DisclosureManagerContext,D.propTypes={name:p.default.string,disclosureType:p.default.string},D.defaultProps={name:"Disclosure Component"};var S=Object.keys(b.availableDisclosureHeights),E=Object.keys(b.availableDisclosureWidths),k=function(e){return e.map((function(e,t){var n=t;return u.default.createElement("option",{key:n,value:e},e)}))},M=function(e){(0,o.default)(n,e);var t=x(n);function n(e){var a;return(0,l.default)(this,n),(a=t.call(this,e)).renderButton=a.renderButton.bind((0,i.default)(a)),a.handleSelectChange=a.handleSelectChange.bind((0,i.default)(a)),a.getId=a.getId.bind((0,i.default)(a)),a.state={id:"dimensions",disclosureHeight:S[0],disclosureWidth:E[0]},a}return(0,r.default)(n,[{key:"handleSelectChange",value:function(e){this.setState((0,s.default)({},e.target.name,e.target.value))}},{key:"getId",value:function(e){return e+this.state.id}},{key:"renderButton",value:function(e){var t=this.context;return u.default.createElement("button",{type:"button",onClick:function(){t.disclose({preferredType:"panel",size:e,typeConfig:{panelBehavior:"squish"},content:{key:"Content-Disclosure-".concat(e),component:u.default.createElement(D,{name:"Disclosure Component",disclosureType:"panel"})}})}},"Disclose (".concat(e,")"))}},{key:"renderFormButton",value:function(){var e=this,t=this.context,n="Disclose (".concat(this.state.disclosureHeight,") x (").concat(this.state.disclosureWidth,")");return u.default.createElement("button",{type:"button",onClick:function(){t.disclose({preferredType:"panel",dimensions:{height:e.state.disclosureHeight,width:e.state.disclosureWidth},content:{key:"Content-Disclosure-Dimensions",component:u.default.createElement(D,{name:"Disclosure Component",disclosureType:"panel"})}})}},n)}},{key:"renderForm",value:function(){return u.default.createElement("form",null,u.default.createElement("label",{htmlFor:this.getId("disclosureHeightSquish")},"Pop Content Height"),u.default.createElement("select",{id:this.getId("disclosureHeightSquish"),name:"disclosureHeight",value:this.state.disclosureHeight,onChange:this.handleSelectChange},k(S)),u.default.createElement("br",null),u.default.createElement("br",null),u.default.createElement("label",{htmlFor:this.getId("disclosureWidthSquish")},"Pop Content Width"),u.default.createElement("select",{id:this.getId("disclosureWidthSquish"),name:"disclosureWidth",value:this.state.disclosureWidth,onChange:this.handleSelectChange},k(E)),u.default.createElement("br",null),u.default.createElement("br",null))}},{key:"render",value:function(){return u.default.createElement(g.default,{header:u.default.createElement(h.default,{title:"SlidePanelManager Child Component"})},u.default.createElement("div",{className:C("content-wrapper")},this.renderButton("default"),this.renderButton("tiny"),this.renderButton("small"),this.renderButton("medium"),this.renderButton("large"),this.renderButton("huge"),this.renderButton("fullscreen"),u.default.createElement("br",null),u.default.createElement("p",null,"The child components can disclose content in the panel at various sizes."),u.default.createElement("p",null,"The sizes available are limited to those of the SlidePanel. The specified size/dimensions will be mapped to the nearest available size.")),u.default.createElement("div",{className:C("content-wrapper")},this.renderForm(),this.renderFormButton()))}}]),n}(u.default.Component);M.contextType=b.DisclosureManagerContext;var T=function(){return u.default.createElement("div",{className:C("example-wrapper")},u.default.createElement(v.default,null,u.default.createElement(M,null)))};t.default=T},1721:function(e,t,n){"use strict";var a=n(6);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var s=a(n(63)),l=a(n(21)),r=a(n(25)),i=a(n(31)),o=a(n(28)),c=a(n(29)),d=a(n(30)),u=a(n(0)),p=a(n(2)),m=a(n(5)),h=a(n(85)),f=a(n(1066)),g=a(n(50)),b=n(220),v=a(n(1075)),y=a(n(1383));function x(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,a=(0,d.default)(e);if(t){var s=(0,d.default)(this).constructor;n=Reflect.construct(a,arguments,s)}else n=a.apply(this,arguments);return(0,c.default)(this,n)}}var C=m.default.bind(y.default),D=function(e){(0,o.default)(n,e);var t=x(n);function n(e){var a;return(0,l.default)(this,n),(a=t.call(this,e)).checkLockState=a.checkLockState.bind((0,i.default)(a)),a.state={text:void 0},a}return(0,r.default)(n,[{key:"componentDidMount",value:function(){var e=this.context;e&&e.registerDismissCheck&&e.registerDismissCheck(this.checkLockState)}},{key:"checkLockState",value:function(){var e=this;return this.state.text&&this.state.text.length?new Promise((function(t,n){confirm("".concat(e.props.name," has unsaved changes that will be lost. Do you wish to continue?"))?t():n()})):Promise.resolve()}},{key:"render",value:function(){var e=this,t=this.props,a=t.name,s=t.disclosureType,l=this.context;return u.default.createElement(g.default,{fill:!0},u.default.createElement(b.DisclosureManagerHeaderAdapter,{title:a,collapsibleMenuView:u.default.createElement(f.default,null,u.default.createElement(f.default.Item,{text:"Button 1",key:"button_1",onClick:function(){e.setState({selectedHeaderAction:"Button 1"})}}),u.default.createElement(f.default.Item,{text:"Button 2",key:"button_2",onClick:function(){e.setState({selectedHeaderAction:"Button 2"})}}))}),u.default.createElement("div",{className:C("content-wrapper")},u.default.createElement("h3",null,a),u.default.createElement("p",null,"The disclosed component can disclose content within the same panel."),u.default.createElement("p",null,"It can also render a header (like above) that implements the various DisclosureManager control functions."),u.default.createElement("button",{type:"button",onClick:function(){l.dismiss().catch((function(){console.log("Dismiss failed. A lock must be in place.")}))}},"Dismiss"),u.default.createElement("button",{type:"button",onClick:function(){l.disclose({preferredType:s,size:"small",content:{key:"Nested ".concat(a),component:u.default.createElement(n,{name:"Nested ".concat(a),disclosureType:s})}})}},"Disclose Again"),u.default.createElement("br",null),u.default.createElement("br",null),u.default.createElement("p",null,"The disclosed component can register a dismiss check function that can interrupt and prevent dismissal. This component will prompt the user if text is detected in the input field below."),u.default.createElement("input",{"aria-label":"textArea",type:"text",onChange:function(t){e.setState({text:t.target.value})},value:this.state.text||""}),this.state.text&&this.state.text.length?u.default.createElement("p",null,"Component has unsaved changes!"):null,u.default.createElement("br",null),u.default.createElement("br",null),u.default.createElement("p",null,"Selected Header Action:"," ",u.default.createElement("b",null,this.state.selectedHeaderAction))))}}]),n}(u.default.Component);D.contextType=b.DisclosureManagerContext,D.propTypes={name:p.default.string,disclosureType:p.default.string},D.defaultProps={name:"Disclosure Component"};var S=Object.keys(b.availableDisclosureHeights),E=Object.keys(b.availableDisclosureWidths),k=function(e){return e.map((function(e,t){var n=t;return u.default.createElement("option",{key:n,value:e},e)}))},M=function(e){(0,o.default)(n,e);var t=x(n);function n(e){var a;return(0,l.default)(this,n),(a=t.call(this,e)).renderButton=a.renderButton.bind((0,i.default)(a)),a.handleSelectChange=a.handleSelectChange.bind((0,i.default)(a)),a.getId=a.getId.bind((0,i.default)(a)),a.state={id:"dimensions",disclosureHeight:S[0],disclosureWidth:E[0]},a}return(0,r.default)(n,[{key:"handleSelectChange",value:function(e){this.setState((0,s.default)({},e.target.name,e.target.value))}},{key:"getId",value:function(e){return e+this.state.id}},{key:"renderButton",value:function(e){var t=this.context;return u.default.createElement("button",{type:"button",onClick:function(){t.disclose({preferredType:"panel",size:e,content:{key:"Content-Disclosure-".concat(e),component:u.default.createElement(D,{name:"Disclosure Component",disclosureType:"panel"})}})}},"Disclose (".concat(e,")"))}},{key:"renderFormButton",value:function(){var e=this,t=this.context,n="Disclose (".concat(this.state.disclosureHeight,") x (").concat(this.state.disclosureWidth,")");return u.default.createElement("button",{type:"button",onClick:function(){t.disclose({preferredType:"panel",dimensions:{height:e.state.disclosureHeight,width:e.state.disclosureWidth},content:{key:"Content-Disclosure-Dimensions",component:u.default.createElement(D,{name:"Disclosure Component",disclosureType:"panel"})}})}},n)}},{key:"renderForm",value:function(){return u.default.createElement("form",null,u.default.createElement("label",{htmlFor:this.getId("disclosureHeightSquish")},"Pop Content Height"),u.default.createElement("select",{id:this.getId("disclosureHeightSquish"),name:"disclosureHeight",value:this.state.disclosureHeight,onChange:this.handleSelectChange},k(S)),u.default.createElement("br",null),u.default.createElement("br",null),u.default.createElement("label",{htmlFor:this.getId("disclosureWidthSquish")},"Pop Content Width"),u.default.createElement("select",{id:this.getId("disclosureWidthSquish"),name:"disclosureWidth",value:this.state.disclosureWidth,onChange:this.handleSelectChange},k(E)),u.default.createElement("br",null),u.default.createElement("br",null))}},{key:"render",value:function(){return u.default.createElement(g.default,{header:u.default.createElement(h.default,{title:"SlidePanelManager Child Component"})},u.default.createElement("div",{className:C("content-wrapper")},this.renderButton("default"),this.renderButton("tiny"),this.renderButton("small"),this.renderButton("medium"),this.renderButton("large"),this.renderButton("huge"),this.renderButton("fullscreen"),u.default.createElement("br",null),u.default.createElement("p",null,"The child components can disclose content in the panel at various sizes."),u.default.createElement("p",null,"The sizes available are limited to those of the SlidePanel. The specified size/dimensions will be mapped to the nearest available size.")),u.default.createElement("div",{className:C("content-wrapper")},this.renderForm(),this.renderFormButton()))}}]),n}(u.default.Component);M.contextType=b.DisclosureManagerContext;var T=function(){return u.default.createElement("div",{className:C("example-wrapper")},u.default.createElement(v.default,{panelBehavior:"squish",disclosureAccessory:u.default.createElement("div",{className:C("disclosure-accessory")},"Disclosure Accessory")},u.default.createElement(M,null)))};t.default=T},2151:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return N}));var a=n(19),s=n.n(a),l=n(24),r=n.n(l),i=n(0),o=n.n(i),c=n(335),d=n(1166),u=n(999),p=n.n(u),m=function(){return Object(c.mdx)(p.a,{rows:[{name:"children",type:function(){var e={};function t(t){var n=t.components,a=r()(t,["components"]);return Object(c.mdx)("wrapper",s()({},e,a,{components:n,mdxType:"MDXLayout"}),Object(c.mdx)("p",null,"node"))}return t.isMDXComponent=!0,t({})},required:!1,defaultValue:"none",description:function(){var e={};function t(t){var n=t.components,a=r()(t,["components"]);return Object(c.mdx)("wrapper",s()({},e,a,{components:n,mdxType:"MDXLayout"}),Object(c.mdx)("p",null,"The components to be rendered in the body of the SlidePanelManager. These components will receive the\ndisclosure capabilities through the DisclosureManger's context API."))}return t.isMDXComponent=!0,t({})}},{name:"panelBehavior",type:function(){var e={};function t(t){var n=t.components,a=r()(t,["components"]);return Object(c.mdx)("wrapper",s()({},e,a,{components:n,mdxType:"MDXLayout"}),Object(c.mdx)("p",null,"enum"),Object(c.mdx)("pre",null,Object(c.mdx)("code",{parentName:"pre",className:"language-json"},'[\n "overlay",\n "squish"\n]\n')))}return t.isMDXComponent=!0,t({})},required:!1,defaultValue:"'overlay'",description:function(){var e={};function t(t){var n=t.components,a=r()(t,["components"]);return Object(c.mdx)("wrapper",s()({},e,a,{components:n,mdxType:"MDXLayout"}),Object(c.mdx)("p",null,"The desired panel behavior. Either 'squish' or 'overlay'."))}return t.isMDXComponent=!0,t({})}},{name:"disclosureAccessory",type:function(){var e={};function t(t){var n=t.components,a=r()(t,["components"]);return Object(c.mdx)("wrapper",s()({},e,a,{components:n,mdxType:"MDXLayout"}),Object(c.mdx)("p",null,"element"))}return t.isMDXComponent=!0,t({})},required:!1,defaultValue:"none",description:function(){var e={};function t(t){var n=t.components,a=r()(t,["components"]);return Object(c.mdx)("wrapper",s()({},e,a,{components:n,mdxType:"MDXLayout"}),Object(c.mdx)("p",null,"The component to render within the panel above the disclosed content."))}return t.isMDXComponent=!0,t({})}}]})},h=n(1719),f=n.n(h),g={};function b(e){var t=e.components,n=r()(e,["components"]);return Object(c.mdx)("wrapper",s()({},g,n,{components:t,mdxType:"MDXLayout"}),Object(c.mdx)("pre",null,Object(c.mdx)("code",{parentName:"pre",className:"language-jsx"},"/* eslint-disable max-classes-per-file */\n/* Slide Panel Manager example with panel behavior as \"overlay\" */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport ActionHeader from 'terra-action-header';\nimport CollapsibleMenuView from 'terra-collapsible-menu-view';\nimport ContentContainer from 'terra-content-container';\nimport {\n  availableDisclosureHeights, availableDisclosureWidths, DisclosureManagerHeaderAdapter, DisclosureManagerContext,\n} from 'terra-disclosure-manager';\n\nimport SlidePanelManager from 'terra-slide-panel-manager';\nimport styles from 'terra-slide-panel-manager/lib/terra-dev-site/doc/example/SlidePanelManager.module.scss';\n\nconst cx = classNames.bind(styles);\n\nclass DisclosureComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.checkLockState = this.checkLockState.bind(this);\n\n    this.state = {\n      text: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const disclosureManager = this.context;\n\n    if (disclosureManager && disclosureManager.registerDismissCheck) {\n      disclosureManager.registerDismissCheck(this.checkLockState);\n    }\n  }\n\n  checkLockState() {\n    if (this.state.text && this.state.text.length) {\n      return new Promise((resolve, reject) => {\n        // eslint-disable-next-line no-restricted-globals\n        if (!confirm(`${this.props.name} has unsaved changes that will be lost. Do you wish to continue?`)) { // eslint-disable-line no-alert\n          reject();\n          return;\n        }\n\n        resolve();\n      });\n    }\n\n    return Promise.resolve();\n  }\n\n  render() {\n    const { name, disclosureType } = this.props;\n    const disclosureManager = this.context;\n\n    return (\n      <ContentContainer fill>\n        <DisclosureManagerHeaderAdapter\n          title={name}\n          collapsibleMenuView={(\n            <CollapsibleMenuView>\n              <CollapsibleMenuView.Item\n                text=\"Button 1\"\n                key=\"button_1\"\n                onClick={() => {\n                  this.setState({\n                    selectedHeaderAction: 'Button 1',\n                  });\n                }}\n              />\n              <CollapsibleMenuView.Item\n                text=\"Button 2\"\n                key=\"button_2\"\n                onClick={() => {\n                  this.setState({\n                    selectedHeaderAction: 'Button 2',\n                  });\n                }}\n              />\n            </CollapsibleMenuView>\n          )}\n        />\n        <div className={cx('content-wrapper')}>\n          <h3>{name}</h3>\n          <p>The disclosed component can disclose content within the same panel.</p>\n          <p>It can also render a header (like above) that implements the various DisclosureManager control functions.</p>\n          <button\n            type=\"button\"\n            onClick={() => {\n              disclosureManager.dismiss()\n                .catch(() => {\n                  console.log('Dismiss failed. A lock must be in place.'); // eslint-disable-line no-console\n                });\n            }}\n          >\n            Dismiss\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => {\n              disclosureManager.disclose({\n                preferredType: disclosureType,\n                size: 'small',\n                content: {\n                  key: `Nested ${name}`,\n                  component: <DisclosureComponent name={`Nested ${name}`} disclosureType={disclosureType} />,\n                },\n              });\n            }}\n          >\n            Disclose Again\n          </button>\n          <br />\n          <br />\n          <p>The disclosed component can register a dismiss check function that can interrupt and prevent dismissal. This component will prompt the user if text is detected in the input field below.</p>\n          <input\n            aria-label=\"textArea\"\n            type=\"text\"\n            onChange={(event) => {\n              this.setState({\n                text: event.target.value,\n              });\n            }}\n            value={this.state.text || ''}\n          />\n          {this.state.text && this.state.text.length ? <p>Component has unsaved changes!</p> : null}\n          <br />\n          <br />\n          <p>\n            Selected Header Action:\n            {' '}\n            <b>{this.state.selectedHeaderAction}</b>\n          </p>\n        </div>\n      </ContentContainer>\n    );\n  }\n}\n\nDisclosureComponent.contextType = DisclosureManagerContext;\nDisclosureComponent.propTypes = {\n  name: PropTypes.string,\n  disclosureType: PropTypes.string,\n};\nDisclosureComponent.defaultProps = {\n  name: 'Disclosure Component',\n};\n\nconst HEIGHT_KEYS = Object.keys(availableDisclosureHeights);\nconst WIDTH_KEYS = Object.keys(availableDisclosureWidths);\n\nconst generateDimensionOptions = values => (\n  values.map((currentValue, index) => {\n    const keyValue = index;\n    return <option key={keyValue} value={currentValue}>{currentValue}</option>;\n  })\n);\n\nclass ContentComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.renderButton = this.renderButton.bind(this);\n    this.handleSelectChange = this.handleSelectChange.bind(this);\n    this.getId = this.getId.bind(this);\n\n    this.state = { id: 'dimensions', disclosureHeight: HEIGHT_KEYS[0], disclosureWidth: WIDTH_KEYS[0] };\n  }\n\n  handleSelectChange(event) {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  getId(name) {\n    return name + this.state.id;\n  }\n\n  renderButton(size) {\n    const disclosureManager = this.context;\n\n    return (\n      <button\n        type=\"button\"\n        onClick={() => {\n          disclosureManager.disclose({\n            preferredType: 'panel',\n            size,\n            content: {\n              key: `Content-Disclosure-${size}`,\n              component: <DisclosureComponent name=\"Disclosure Component\" disclosureType=\"panel\" />,\n            },\n          });\n        }}\n      >\n        {`Disclose (${size})`}\n      </button>\n    );\n  }\n\n  renderFormButton() {\n    const disclosureManager = this.context;\n\n    const name = `Disclose (${this.state.disclosureHeight}) x (${this.state.disclosureWidth})`;\n\n    return (\n      <button\n        type=\"button\"\n        onClick={() => {\n          disclosureManager.disclose({\n            preferredType: 'panel',\n            typeConfig: { panelBehavior: 'overlay' },\n            dimensions: { height: this.state.disclosureHeight, width: this.state.disclosureWidth },\n            content: {\n              key: 'Content-Disclosure-Dimensions',\n              component: <DisclosureComponent name=\"Disclosure Component\" disclosureType=\"panel\" />,\n            },\n          });\n        }}\n      >\n        {name}\n      </button>\n    );\n  }\n\n  renderForm() {\n    return (\n      <form>\n        <label htmlFor={this.getId('disclosureHeightOverlay')}>Pop Content Height</label>\n        <select id={this.getId('disclosureHeightOverlay')} name=\"disclosureHeight\" value={this.state.disclosureHeight} onChange={this.handleSelectChange}>\n          {generateDimensionOptions(HEIGHT_KEYS)}\n        </select>\n        <br />\n        <br />\n        <label htmlFor={this.getId('disclosureWidthOverlay')}>Pop Content Width</label>\n        <select id={this.getId('disclosureWidthOverlay')} name=\"disclosureWidth\" value={this.state.disclosureWidth} onChange={this.handleSelectChange}>\n          {generateDimensionOptions(WIDTH_KEYS)}\n        </select>\n        <br />\n        <br />\n      </form>\n    );\n  }\n\n  render() {\n    return (\n      <ContentContainer\n        header={(\n          <ActionHeader\n            title=\"SlidePanelManager Child Component\"\n          />\n        )}\n      >\n        <div className={cx('content-wrapper')}>\n          {this.renderButton('default')}\n          {this.renderButton('tiny')}\n          {this.renderButton('small')}\n          {this.renderButton('medium')}\n          {this.renderButton('large')}\n          {this.renderButton('huge')}\n          {this.renderButton('fullscreen')}\n          <br />\n          <p>The child components can disclose content in the panel at various sizes.</p>\n          <p>The sizes available are limited to those of the SlidePanel. The specified size/dimensions will be mapped to the nearest available size.</p>\n        </div>\n        <div className={cx('content-wrapper')}>\n          {this.renderForm()}\n          {this.renderFormButton()}\n        </div>\n      </ContentContainer>\n    );\n  }\n}\n\nContentComponent.contextType = DisclosureManagerContext;\n\nconst SlidePanelManagerExample = () => (\n  <div className={cx('example-wrapper')}>\n    <SlidePanelManager>\n      <ContentComponent />\n    </SlidePanelManager>\n  </div>\n);\n\nexport default SlidePanelManagerExample;\n\n")))}b.isMDXComponent=!0;var v=n(990),y=n.n(v),x={};function C(e){var t=e.components,n=r()(e,["components"]);return Object(c.mdx)("wrapper",s()({},x,n,{components:t,mdxType:"MDXLayout"}),Object(c.mdx)("pre",null,Object(c.mdx)("code",{parentName:"pre",className:"language-scss"},":local {\n  .example-wrapper {\n    border: 1px solid #d3d3d3;\n    height: 35rem;\n  }\n\n  .content-wrapper {\n    padding: 0.7rem;\n  }\n\n  .disclosure-accessory {\n    background-color: #add8e6;\n    padding: 1rem;\n  }\n}\n\n")))}C.isMDXComponent=!0;var D=function(e){var t=e.title,n=e.description,a=e.isExpanded;return o.a.createElement(y.a,{title:t||"Slide Panel Manager Example",description:n,example:o.a.createElement(f.a,null),exampleCssSrc:o.a.createElement(C,null),exampleSrc:o.a.createElement(b,null),isExpanded:a})},S=n(1720),E=n.n(S),k={};function M(e){var t=e.components,n=r()(e,["components"]);return Object(c.mdx)("wrapper",s()({},k,n,{components:t,mdxType:"MDXLayout"}),Object(c.mdx)("pre",null,Object(c.mdx)("code",{parentName:"pre",className:"language-jsx"},"/* eslint-disable max-classes-per-file */\n/* Slide Panel Manager example with panel behavior as \"squish\" */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport ActionHeader from 'terra-action-header';\nimport CollapsibleMenuView from 'terra-collapsible-menu-view';\nimport ContentContainer from 'terra-content-container';\nimport {\n  availableDisclosureHeights, availableDisclosureWidths, DisclosureManagerHeaderAdapter, DisclosureManagerContext,\n} from 'terra-disclosure-manager';\n\nimport SlidePanelManager from 'terra-slide-panel-manager';\nimport styles from 'terra-slide-panel-manager/lib/terra-dev-site/doc/example/SlidePanelManager.module.scss';\n\nconst cx = classNames.bind(styles);\n\nclass DisclosureComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.checkLockState = this.checkLockState.bind(this);\n\n    this.state = {\n      text: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const disclosureManager = this.context;\n\n    if (disclosureManager && disclosureManager.registerDismissCheck) {\n      disclosureManager.registerDismissCheck(this.checkLockState);\n    }\n  }\n\n  checkLockState() {\n    if (this.state.text && this.state.text.length) {\n      return new Promise((resolve, reject) => {\n        // eslint-disable-next-line no-restricted-globals\n        if (!confirm(`${this.props.name} has unsaved changes that will be lost. Do you wish to continue?`)) { // eslint-disable-line no-alert\n          reject();\n          return;\n        }\n\n        resolve();\n      });\n    }\n\n    return Promise.resolve();\n  }\n\n  render() {\n    const { name, disclosureType } = this.props;\n    const disclosureManager = this.context;\n\n    return (\n      <ContentContainer fill>\n        <DisclosureManagerHeaderAdapter\n          title={name}\n          collapsibleMenuView={(\n            <CollapsibleMenuView>\n              <CollapsibleMenuView.Item\n                text=\"Button 1\"\n                key=\"button_1\"\n                onClick={() => {\n                  this.setState({\n                    selectedHeaderAction: 'Button 1',\n                  });\n                }}\n              />\n              <CollapsibleMenuView.Item\n                text=\"Button 2\"\n                key=\"button_2\"\n                onClick={() => {\n                  this.setState({\n                    selectedHeaderAction: 'Button 2',\n                  });\n                }}\n              />\n            </CollapsibleMenuView>\n          )}\n        />\n        <div className={cx('content-wrapper')}>\n          <h3>{name}</h3>\n          <p>The disclosed component can disclose content within the same panel.</p>\n          <p>It can also render a header (like above) that implements the various DisclosureManager control functions.</p>\n          <button\n            type=\"button\"\n            onClick={() => {\n              disclosureManager.dismiss()\n                .catch(() => {\n                  console.log('Dismiss failed. A lock must be in place.'); // eslint-disable-line no-console\n                });\n            }}\n          >\n            Dismiss\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => {\n              disclosureManager.disclose({\n                preferredType: disclosureType,\n                size: 'small',\n                content: {\n                  key: `Nested ${name}`,\n                  component: <DisclosureComponent name={`Nested ${name}`} disclosureType={disclosureType} />,\n                },\n              });\n            }}\n          >\n            Disclose Again\n          </button>\n          <br />\n          <br />\n          <p>The disclosed component can register a dismiss check function that can interrupt and prevent dismissal. This component will prompt the user if text is detected in the input field below.</p>\n          <input\n            aria-label=\"textArea\"\n            type=\"text\"\n            onChange={(event) => {\n              this.setState({\n                text: event.target.value,\n              });\n            }}\n            value={this.state.text || ''}\n          />\n          {this.state.text && this.state.text.length ? <p>Component has unsaved changes!</p> : null}\n          <br />\n          <br />\n          <p>\n            Selected Header Action:\n            {' '}\n            <b>{this.state.selectedHeaderAction}</b>\n          </p>\n        </div>\n      </ContentContainer>\n    );\n  }\n}\n\nDisclosureComponent.contextType = DisclosureManagerContext;\nDisclosureComponent.propTypes = {\n  name: PropTypes.string,\n  disclosureType: PropTypes.string,\n};\nDisclosureComponent.defaultProps = {\n  name: 'Disclosure Component',\n};\n\nconst HEIGHT_KEYS = Object.keys(availableDisclosureHeights);\nconst WIDTH_KEYS = Object.keys(availableDisclosureWidths);\n\nconst generateDimensionOptions = values => (\n  values.map((currentValue, index) => {\n    const keyValue = index;\n    return <option key={keyValue} value={currentValue}>{currentValue}</option>;\n  })\n);\n\nclass ContentComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.renderButton = this.renderButton.bind(this);\n    this.handleSelectChange = this.handleSelectChange.bind(this);\n    this.getId = this.getId.bind(this);\n\n    this.state = { id: 'dimensions', disclosureHeight: HEIGHT_KEYS[0], disclosureWidth: WIDTH_KEYS[0] };\n  }\n\n  handleSelectChange(event) {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  getId(name) {\n    return name + this.state.id;\n  }\n\n  renderButton(size) {\n    const disclosureManager = this.context;\n\n    return (\n      <button\n        type=\"button\"\n        onClick={() => {\n          disclosureManager.disclose({\n            preferredType: 'panel',\n            size,\n            typeConfig: { panelBehavior: 'squish' },\n            content: {\n              key: `Content-Disclosure-${size}`,\n              component: <DisclosureComponent name=\"Disclosure Component\" disclosureType=\"panel\" />,\n            },\n          });\n        }}\n      >\n        {`Disclose (${size})`}\n      </button>\n    );\n  }\n\n  renderFormButton() {\n    const disclosureManager = this.context;\n\n    const name = `Disclose (${this.state.disclosureHeight}) x (${this.state.disclosureWidth})`;\n\n    return (\n      <button\n        type=\"button\"\n        onClick={() => {\n          disclosureManager.disclose({\n            preferredType: 'panel',\n            dimensions: { height: this.state.disclosureHeight, width: this.state.disclosureWidth },\n            content: {\n              key: 'Content-Disclosure-Dimensions',\n              component: <DisclosureComponent name=\"Disclosure Component\" disclosureType=\"panel\" />,\n            },\n          });\n        }}\n      >\n        {name}\n      </button>\n    );\n  }\n\n  renderForm() {\n    return (\n      <form>\n        <label htmlFor={this.getId('disclosureHeightSquish')}>Pop Content Height</label>\n        <select id={this.getId('disclosureHeightSquish')} name=\"disclosureHeight\" value={this.state.disclosureHeight} onChange={this.handleSelectChange}>\n          {generateDimensionOptions(HEIGHT_KEYS)}\n        </select>\n        <br />\n        <br />\n        <label htmlFor={this.getId('disclosureWidthSquish')}>Pop Content Width</label>\n        <select id={this.getId('disclosureWidthSquish')} name=\"disclosureWidth\" value={this.state.disclosureWidth} onChange={this.handleSelectChange}>\n          {generateDimensionOptions(WIDTH_KEYS)}\n        </select>\n        <br />\n        <br />\n      </form>\n    );\n  }\n\n  render() {\n    return (\n      <ContentContainer\n        header={(\n          <ActionHeader\n            title=\"SlidePanelManager Child Component\"\n          />\n        )}\n      >\n        <div className={cx('content-wrapper')}>\n          {this.renderButton('default')}\n          {this.renderButton('tiny')}\n          {this.renderButton('small')}\n          {this.renderButton('medium')}\n          {this.renderButton('large')}\n          {this.renderButton('huge')}\n          {this.renderButton('fullscreen')}\n          <br />\n          <p>The child components can disclose content in the panel at various sizes.</p>\n          <p>The sizes available are limited to those of the SlidePanel. The specified size/dimensions will be mapped to the nearest available size.</p>\n        </div>\n        <div className={cx('content-wrapper')}>\n          {this.renderForm()}\n          {this.renderFormButton()}\n        </div>\n      </ContentContainer>\n    );\n  }\n}\n\nContentComponent.contextType = DisclosureManagerContext;\n\nconst SlidePanelManagerExample = () => (\n  <div className={cx('example-wrapper')}>\n    <SlidePanelManager>\n      <ContentComponent />\n    </SlidePanelManager>\n  </div>\n);\n\nexport default SlidePanelManagerExample;\n\n")))}M.isMDXComponent=!0;var T=function(e){var t=e.title,n=e.description,a=e.isExpanded;return o.a.createElement(y.a,{title:t||"Slide Panel Manager Squish Example",description:n,example:o.a.createElement(E.a,null),exampleCssSrc:o.a.createElement(C,null),exampleSrc:o.a.createElement(M,null),isExpanded:a})},w=n(1721),P=n.n(w),O={};function H(e){var t=e.components,n=r()(e,["components"]);return Object(c.mdx)("wrapper",s()({},O,n,{components:t,mdxType:"MDXLayout"}),Object(c.mdx)("pre",null,Object(c.mdx)("code",{parentName:"pre",className:"language-jsx"},"/* eslint-disable max-classes-per-file */\n/* Slide Panel Manager example with panel behavior as \"squish\" */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport ActionHeader from 'terra-action-header';\nimport CollapsibleMenuView from 'terra-collapsible-menu-view';\nimport ContentContainer from 'terra-content-container';\nimport {\n  availableDisclosureHeights, availableDisclosureWidths, DisclosureManagerHeaderAdapter, DisclosureManagerContext,\n} from 'terra-disclosure-manager';\n\nimport SlidePanelManager from 'terra-slide-panel-manager';\nimport styles from 'terra-slide-panel-manager/lib/terra-dev-site/doc/example/SlidePanelManager.module.scss';\n\nconst cx = classNames.bind(styles);\n\nclass DisclosureComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.checkLockState = this.checkLockState.bind(this);\n\n    this.state = {\n      text: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const disclosureManager = this.context;\n\n    if (disclosureManager && disclosureManager.registerDismissCheck) {\n      disclosureManager.registerDismissCheck(this.checkLockState);\n    }\n  }\n\n  checkLockState() {\n    if (this.state.text && this.state.text.length) {\n      return new Promise((resolve, reject) => {\n        // eslint-disable-next-line no-restricted-globals\n        if (!confirm(`${this.props.name} has unsaved changes that will be lost. Do you wish to continue?`)) { // eslint-disable-line no-alert\n          reject();\n          return;\n        }\n\n        resolve();\n      });\n    }\n\n    return Promise.resolve();\n  }\n\n  render() {\n    const { name, disclosureType } = this.props;\n    const disclosureManager = this.context;\n\n    return (\n      <ContentContainer fill>\n        <DisclosureManagerHeaderAdapter\n          title={name}\n          collapsibleMenuView={(\n            <CollapsibleMenuView>\n              <CollapsibleMenuView.Item\n                text=\"Button 1\"\n                key=\"button_1\"\n                onClick={() => {\n                  this.setState({\n                    selectedHeaderAction: 'Button 1',\n                  });\n                }}\n              />\n              <CollapsibleMenuView.Item\n                text=\"Button 2\"\n                key=\"button_2\"\n                onClick={() => {\n                  this.setState({\n                    selectedHeaderAction: 'Button 2',\n                  });\n                }}\n              />\n            </CollapsibleMenuView>\n          )}\n        />\n        <div className={cx('content-wrapper')}>\n          <h3>{name}</h3>\n          <p>The disclosed component can disclose content within the same panel.</p>\n          <p>It can also render a header (like above) that implements the various DisclosureManager control functions.</p>\n          <button\n            type=\"button\"\n            onClick={() => {\n              disclosureManager.dismiss()\n                .catch(() => {\n                  console.log('Dismiss failed. A lock must be in place.'); // eslint-disable-line no-console\n                });\n            }}\n          >\n            Dismiss\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => {\n              disclosureManager.disclose({\n                preferredType: disclosureType,\n                size: 'small',\n                content: {\n                  key: `Nested ${name}`,\n                  component: <DisclosureComponent name={`Nested ${name}`} disclosureType={disclosureType} />,\n                },\n              });\n            }}\n          >\n            Disclose Again\n          </button>\n          <br />\n          <br />\n          <p>The disclosed component can register a dismiss check function that can interrupt and prevent dismissal. This component will prompt the user if text is detected in the input field below.</p>\n          <input\n            aria-label=\"textArea\"\n            type=\"text\"\n            onChange={(event) => {\n              this.setState({\n                text: event.target.value,\n              });\n            }}\n            value={this.state.text || ''}\n          />\n          {this.state.text && this.state.text.length ? <p>Component has unsaved changes!</p> : null}\n          <br />\n          <br />\n          <p>\n            Selected Header Action:\n            {' '}\n            <b>{this.state.selectedHeaderAction}</b>\n          </p>\n        </div>\n      </ContentContainer>\n    );\n  }\n}\n\nDisclosureComponent.contextType = DisclosureManagerContext;\nDisclosureComponent.propTypes = {\n  name: PropTypes.string,\n  disclosureType: PropTypes.string,\n};\nDisclosureComponent.defaultProps = {\n  name: 'Disclosure Component',\n};\n\nconst HEIGHT_KEYS = Object.keys(availableDisclosureHeights);\nconst WIDTH_KEYS = Object.keys(availableDisclosureWidths);\n\nconst generateDimensionOptions = values => (\n  values.map((currentValue, index) => {\n    const keyValue = index;\n    return <option key={keyValue} value={currentValue}>{currentValue}</option>;\n  })\n);\n\nclass ContentComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.renderButton = this.renderButton.bind(this);\n    this.handleSelectChange = this.handleSelectChange.bind(this);\n    this.getId = this.getId.bind(this);\n\n    this.state = { id: 'dimensions', disclosureHeight: HEIGHT_KEYS[0], disclosureWidth: WIDTH_KEYS[0] };\n  }\n\n  handleSelectChange(event) {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  getId(name) {\n    return name + this.state.id;\n  }\n\n  renderButton(size) {\n    const disclosureManager = this.context;\n\n    return (\n      <button\n        type=\"button\"\n        onClick={() => {\n          disclosureManager.disclose({\n            preferredType: 'panel',\n            size,\n            content: {\n              key: `Content-Disclosure-${size}`,\n              component: <DisclosureComponent name=\"Disclosure Component\" disclosureType=\"panel\" />,\n            },\n          });\n        }}\n      >\n        {`Disclose (${size})`}\n      </button>\n    );\n  }\n\n  renderFormButton() {\n    const disclosureManager = this.context;\n\n    const name = `Disclose (${this.state.disclosureHeight}) x (${this.state.disclosureWidth})`;\n\n    return (\n      <button\n        type=\"button\"\n        onClick={() => {\n          disclosureManager.disclose({\n            preferredType: 'panel',\n            dimensions: { height: this.state.disclosureHeight, width: this.state.disclosureWidth },\n            content: {\n              key: 'Content-Disclosure-Dimensions',\n              component: <DisclosureComponent name=\"Disclosure Component\" disclosureType=\"panel\" />,\n            },\n          });\n        }}\n      >\n        {name}\n      </button>\n    );\n  }\n\n  renderForm() {\n    return (\n      <form>\n        <label htmlFor={this.getId('disclosureHeightSquish')}>Pop Content Height</label>\n        <select id={this.getId('disclosureHeightSquish')} name=\"disclosureHeight\" value={this.state.disclosureHeight} onChange={this.handleSelectChange}>\n          {generateDimensionOptions(HEIGHT_KEYS)}\n        </select>\n        <br />\n        <br />\n        <label htmlFor={this.getId('disclosureWidthSquish')}>Pop Content Width</label>\n        <select id={this.getId('disclosureWidthSquish')} name=\"disclosureWidth\" value={this.state.disclosureWidth} onChange={this.handleSelectChange}>\n          {generateDimensionOptions(WIDTH_KEYS)}\n        </select>\n        <br />\n        <br />\n      </form>\n    );\n  }\n\n  render() {\n    return (\n      <ContentContainer\n        header={(\n          <ActionHeader\n            title=\"SlidePanelManager Child Component\"\n          />\n        )}\n      >\n        <div className={cx('content-wrapper')}>\n          {this.renderButton('default')}\n          {this.renderButton('tiny')}\n          {this.renderButton('small')}\n          {this.renderButton('medium')}\n          {this.renderButton('large')}\n          {this.renderButton('huge')}\n          {this.renderButton('fullscreen')}\n          <br />\n          <p>The child components can disclose content in the panel at various sizes.</p>\n          <p>The sizes available are limited to those of the SlidePanel. The specified size/dimensions will be mapped to the nearest available size.</p>\n        </div>\n        <div className={cx('content-wrapper')}>\n          {this.renderForm()}\n          {this.renderFormButton()}\n        </div>\n      </ContentContainer>\n    );\n  }\n}\n\nContentComponent.contextType = DisclosureManagerContext;\n\nconst SlidePanelManagerExample = () => (\n  <div className={cx('example-wrapper')}>\n    <SlidePanelManager\n      panelBehavior=\"squish\"\n      disclosureAccessory={(\n        <div className={cx('disclosure-accessory')}>\n          Disclosure Accessory\n        </div>\n)}\n    >\n      <ContentComponent />\n    </SlidePanelManager>\n  </div>\n);\n\nexport default SlidePanelManagerExample;\n\n")))}H.isMDXComponent=!0;var j=function(e){var t=e.title,n=e.description,a=e.isExpanded;return o.a.createElement(y.a,{title:t||"Slide Panel Manager Accessory Example",description:n,example:o.a.createElement(P.a,null),exampleCssSrc:o.a.createElement(C,null),exampleSrc:o.a.createElement(H,null),isExpanded:a})},B={};function N(e){var t=e.components,n=r()(e,["components"]);return Object(c.mdx)("wrapper",s()({},B,n,{components:t,mdxType:"MDXLayout"}),Object(c.mdx)(d.a,{mdxType:"Badge"}),Object(c.mdx)("h1",{id:"terra-slidepanel-manager"},"Terra SlidePanel Manager"),Object(c.mdx)("p",null,"The SlidePanelManager is a DisclosureManager implementation that presents disclosed content using a SlidePanel."),Object(c.mdx)("h2",{id:"getting-started"},"Getting Started"),Object(c.mdx)("ul",null,Object(c.mdx)("li",{parentName:"ul"},"Install with ",Object(c.mdx)("a",{parentName:"li",href:"https://www.npmjs.com/"},"npmjs"),":",Object(c.mdx)("ul",{parentName:"li"},Object(c.mdx)("li",{parentName:"ul"},Object(c.mdx)("inlineCode",{parentName:"li"},"npm install terra-slide-panel-manager"))))),Object(c.mdx)("h2",{id:"peer-dependencies"},"Peer Dependencies"),Object(c.mdx)("p",null,"This component requires the following peer dependencies be installed in your app for the component to properly function."),Object(c.mdx)("table",null,Object(c.mdx)("thead",{parentName:"table"},Object(c.mdx)("tr",{parentName:"thead"},Object(c.mdx)("th",{parentName:"tr",align:null},"Peer Dependency"),Object(c.mdx)("th",{parentName:"tr",align:null},"Version"))),Object(c.mdx)("tbody",{parentName:"table"},Object(c.mdx)("tr",{parentName:"tbody"},Object(c.mdx)("td",{parentName:"tr",align:null},"react"),Object(c.mdx)("td",{parentName:"tr",align:null},"^16.8.5")),Object(c.mdx)("tr",{parentName:"tbody"},Object(c.mdx)("td",{parentName:"tr",align:null},"react-dom"),Object(c.mdx)("td",{parentName:"tr",align:null},"^16.8.5")),Object(c.mdx)("tr",{parentName:"tbody"},Object(c.mdx)("td",{parentName:"tr",align:null},"terra-disclosure-manager"),Object(c.mdx)("td",{parentName:"tr",align:null},"^4.16.0")))),Object(c.mdx)("h2",{id:"usage"},"Usage"),Object(c.mdx)("pre",null,Object(c.mdx)("code",{parentName:"pre",className:"language-jsx"},"import SlidePanelManager, { disclosureType } from 'terra-slide-panel-manager';\n")),Object(c.mdx)("h2",{id:"implementation-requirements"},"Implementation Requirements"),Object(c.mdx)("p",null,"The SlidePanelManager utilizes the DisclosureManager API to manage disclosure requests. The components provided as children to the SlidePanelManager, and the components disclosed within it, must interface with the SlidePanelManager's context using the ",Object(c.mdx)("inlineCode",{parentName:"p"},"withDisclosureManager()")," higher-order component generator provided by the ",Object(c.mdx)("inlineCode",{parentName:"p"},"terra-disclosure-manager")," package. Alternatively, ",Object(c.mdx)("inlineCode",{parentName:"p"},"DisclosureManagerContext")," can be consumed directly using the ",Object(c.mdx)("inlineCode",{parentName:"p"},"useContext")," hook."),Object(c.mdx)("p",null,"The SlidePanelManager responds to ",Object(c.mdx)("inlineCode",{parentName:"p"},'"panel"')," disclosure type requests. Components that wish to disclose content using the SlidePanelManager should provide a preferred type of ",Object(c.mdx)("inlineCode",{parentName:"p"},'"panel"'),". This value is exported from the package as ",Object(c.mdx)("inlineCode",{parentName:"p"},"disclosureType"),". Please see the ",Object(c.mdx)("a",{parentName:"p",href:"https://engineering.cerner.com/terra-ui/#/components/terra-disclosure-manager/disclosure-manager/disclosure-manager-api"},"DisclosureManager API documentation")," for a full description of the SlidePanelManager's capabilities."),Object(c.mdx)("h2",{id:"disclosuremanagerheaderadapter-support"},"DisclosureManagerHeaderAdapter Support"),Object(c.mdx)("p",null,"If a component disclosed by the SlidePanelManager renders a ",Object(c.mdx)("inlineCode",{parentName:"p"},"DisclosureManagerHeaderAdapter"),", the SlidePanelManager will render an ActionHeader and provide the standard disclosure navigation controls (close, go back, maximize/minimize, etc.) within it. The disclosed component can use the ",Object(c.mdx)("inlineCode",{parentName:"p"},"DisclosureManagerHeaderAdapter")," to inject its own title and CollapsibleButtonView into the ActionHeader."),Object(c.mdx)("p",null,"If the disclosed component does ",Object(c.mdx)("strong",{parentName:"p"},"not")," render a ",Object(c.mdx)("inlineCode",{parentName:"p"},"DisclosureManagerHeaderAdapter"),", the SlidePanelManager will ",Object(c.mdx)("strong",{parentName:"p"},"not")," render an ActionHeader itself. In this case, it is assumed that the disclosed component is rendering its own header. The disclosed component is responsible for rendering the appropriate controls to navigate the disclosure stack."),Object(c.mdx)("blockquote",null,Object(c.mdx)("p",{parentName:"blockquote"},"Note: The DisclosureManagerHeaderAdapter is the preferred way to present a header within the SlidePanelManager. In a future major release, the SlidePanelManager will ",Object(c.mdx)("strong",{parentName:"p"},"always")," render the header and navigation controls, regardless of the presence of a DisclosureManagerHeaderAdapter.")),Object(c.mdx)("h2",{id:"disclosure-accessory"},"Disclosure Accessory"),Object(c.mdx)("p",null,"The ",Object(c.mdx)("inlineCode",{parentName:"p"},"disclosureAccessory")," prop allows consumers of the SlidePanelManager to render a static component above the disclosed panel content. The provided component will be rendered below the standard ActionHeader and above the disclosed content. This can be used to easily provide additional context to every disclosed component. This component is provided once to the SlidePanelManager instance, not on a per-disclosure basis, and each component in the disclosure stack will be decorated with the same accessory component."),Object(c.mdx)("h2",{id:"component-features"},"Component Features"),Object(c.mdx)("ul",null,Object(c.mdx)("li",{parentName:"ul"},Object(c.mdx)("a",{parentName:"li",href:"https://engineering.cerner.com/terra-ui/about/terra-ui/component-standards#cross-browser-support"},"Cross-Browser Support")),Object(c.mdx)("li",{parentName:"ul"},Object(c.mdx)("a",{parentName:"li",href:"https://engineering.cerner.com/terra-ui/about/terra-ui/component-standards#responsive-support"},"Responsive Support")),Object(c.mdx)("li",{parentName:"ul"},Object(c.mdx)("a",{parentName:"li",href:"https://engineering.cerner.com/terra-ui/about/terra-ui/component-standards#mobile-support"},"Mobile Support"))),Object(c.mdx)("h2",{id:"examples"},"Examples"),Object(c.mdx)(D,{title:"Overlay Example",mdxType:"SlidePanelManagerExample"}),Object(c.mdx)(T,{title:"Squish Example",mdxType:"SlidePanelManagerSquishExample"}),Object(c.mdx)(j,{title:"Disclosure Accessory Example",mdxType:"SlidePanelManagerAccessoryExample"}),Object(c.mdx)("h2",{id:"slide-panel-manager-props-table"},"Slide Panel Manager Props Table"),Object(c.mdx)(m,{mdxType:"SlidePanelManagerPropsTable"}))}N.isMDXComponent=!0}}]);